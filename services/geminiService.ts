import { GoogleGenAI, Type, Content, Part } from "@google/genai";
import type { DrawnCard, Spread, TarotCard, AlmanacInfo } from '../types';

const ai = new GoogleGenAI({ apiKey: process.env.API_KEY! });

export const generateCardImage = async (card: TarotCard): Promise<string> => {
  const prompt = `A mystical tarot card illustration of '${card.name}'. 
Style: ethereal, magical realism, detailed linework, art nouveau influences, rich symbolism related to its meaning. 
Keywords: ${card.uprightKeywords.join(', ')}. 
The image should be vertical. Do not include any text, letters, or borders on the card art itself.`;

  try {
    const response = await ai.models.generateImages({
      model: 'imagen-4.0-generate-001',
      prompt: prompt,
      config: {
        numberOfImages: 1,
        outputMimeType: 'image/png',
        aspectRatio: '3:4',
      },
    });

    if (response.generatedImages && response.generatedImages.length > 0) {
      const base64ImageBytes: string = response.generatedImages[0].image.imageBytes;
      return `data:image/png;base64,${base64ImageBytes}`;
    } else {
      throw new Error("No image was generated by the API.");
    }
  } catch (error) {
    console.error(`Error generating image for ${card.name}:`, error);
    throw new Error(`Failed to generate image for ${card.name}.`);
  }
};

export const identifyCardFromImage = async (base64Image: string): Promise<string> => {
  const imagePart: Part = {
    inlineData: {
      mimeType: 'image/jpeg', // assuming jpeg, but could be png
      data: base64Image.split(',')[1], // remove the "data:image/jpeg;base64," part
    },
  };
  const textPart: Part = {
    text: "Identify the tarot card in this image. Respond with ONLY the name of the card. For example: 'The Fool'. Do not add any other text or explanation.",
  };

  const contents: Content = { parts: [imagePart, textPart] };

  try {
    const response = await ai.models.generateContent({
      model: 'gemini-2.5-flash',
      contents,
    });
    return response.text.trim();
  } catch (error) {
    console.error("Error identifying card from image:", error);
    throw new Error("Failed to identify the card from the provided image.");
  }
};


function formatCardsForPrompt(drawnCards: DrawnCard[]): string {
  return drawnCards.map((c, i) => 
    `Card ${i + 1}: ${c.card.name} (${c.isReversed ? 'Reversed' : 'Upright'})`
  ).join('\n');
}

export const getInterpretation = async (
  drawnCards: DrawnCard[],
  spread: Spread,
  question: string,
  almanacInfo: AlmanacInfo
): Promise<{ overall: string; cards: { cardName: string; meaning: string }[] }> => {

  const cardDetails = formatCardsForPrompt(drawnCards);
  const positionDetails = spread.positions.map((p, i) => `Position ${i+1} (${p.title}): ${p.description}`).join('\n');
  const userQuestion = question ? `The user's question is: "${question}"` : "The user has not provided a specific question; this is a general reading.";

  const almanacContext = `
**Contextual Information:**
- **Lunar Phase:** ${almanacInfo.lunarPhase}
- **Season:** ${almanacInfo.season}
- **Holiday/Sabbat:** ${almanacInfo.holiday || 'None'}

Please subtly weave these contextual elements into the interpretation where they feel relevant to add depth and nuance.
`;

  const contents = `
You are a wise and compassionate Tarot guide. Your tone should be empowering, insightful, and slightly mystical, as if sharing sacred knowledge with a trusted friend. Avoid overly dramatic or fortune-teller language. Focus on providing gentle guidance, highlighting opportunities for growth, and framing challenges as lessons. The interpretation should feel personal, supportive, and deeply connected to the cards' symbolism.

**Reading Details:**
- **Spread:** ${spread.name}
- **Question/Focus:** ${userQuestion}
${almanacContext}
**Cards Drawn:**
${cardDetails}

**Spread Positions:**
${positionDetails}

Please provide an interpretation in JSON format. The JSON object should have two keys:
1.  "overall": A summary of the reading's main message (2-3 sentences).
2.  "cards": An array of objects, one for each card drawn. Each object should have:
    - "cardName": The name of the card (e.g., "The Fool").
    - "meaning": An interpretation of that card in its specific position within the spread, considering the user's question, the other cards, and the contextual information provided. Keep this to 2-4 sentences.

Do not include any introductory or concluding text outside of the JSON structure.
`;

  try {
    const response = await ai.models.generateContent({
      model: "gemini-2.5-flash",
      contents,
      config: {
        responseMimeType: "application/json",
        responseSchema: {
          type: Type.OBJECT,
          properties: {
            overall: {
              type: Type.STRING,
              description: "A summary of the reading's main message."
            },
            cards: {
              type: Type.ARRAY,
              description: "An array of interpretations for each card drawn.",
              items: {
                type: Type.OBJECT,
                properties: {
                  cardName: {
                    type: Type.STRING,
                    description: "The name of the card."
                  },
                  meaning: {
                    type: Type.STRING,
                    description: "The interpretation of the card in its position."
                  }
                },
                required: ["cardName", "meaning"]
              }
            }
          },
          required: ["overall", "cards"]
        },
      },
    });

    const jsonText = response.text;
    const result = JSON.parse(jsonText);

    if (result && result.overall && Array.isArray(result.cards)) {
      return result;
    } else {
      throw new Error("Invalid JSON structure received from API.");
    }

  } catch (error) {
    console.error("Error getting interpretation from Gemini API:", error);
    throw new Error("The Tarot spirits are busy. Please try again in a moment.");
  }
};
